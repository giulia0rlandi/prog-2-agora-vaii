# -*- coding: utf-8 -*-
"""
Created on Wed May 15 01:07:09 2024

@author: Ferlin
"""

# -*- coding: latin-1 -*-
############################################################################################
#Nome completo:
#Matrícula PUC-Rio:
#Declaração de autoria: declaro que este documento foi produzido por mim em sua totalidade,
#                 sem consultas a outros alunos, professores ou qualquer outra pessoa.
##############################################################################4#############
import pandas as pd
import matplotlib.pyplot as plt
import random
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
print('=================================')
print('Trabalhando com PANDAS - Series')
print('=================================')
'''
No arquivo trabalhadores21.xlsx estão armazenados os dados de diversos trabalhadores
que atuam em diferentes profissões.
Há 2 planilhas:
TRABALHADOR: descreve a pessoa, com as seguintes informações:
    PROFISSAO: profissão da pessoa
    GENERO: gênero(F, M ou X)
    IDADE: idade, em anos, da pessoa 

AMBIENTE: tipo de ambiente principal de atuação da profissão, com as seguintes informações:
    PROFISSAO: nome da profissão
    AMBIENTE: ambiente principal de atuação (Interno, Externo, Misto)

As seguintes Series estão disponibilizadas:
- da planilha TRABALHADOR:
    srGenProf - índice: profissão do trabalhador  
                valor: gênero do trabalhador
    srIdProf - índice: profissão do trabalhador   
               valor: idade do trabalhador  
    srIdGen - índice: gênero do trabalhador   
              valor: idade do trabalhador  
- da planilha AMBIENTE:             
    srAmbProf - índice: Profissão   
                 valor: ambiente principal de atuação da profissão

'''
srGenProf=pd.read_excel('trabalhadores21.xlsx',sheet_name='TRABALHADOR',header=0,usecols=(0,1),index_col=0).squeeze('columns')
srIdProf=pd.read_excel('trabalhadores21.xlsx',sheet_name='TRABALHADOR',header=0,usecols=(0,2),index_col=0).squeeze('columns')
srIdGen=pd.read_excel('trabalhadores21.xlsx',sheet_name='TRABALHADOR',header=0,usecols=(1,2),index_col=0).squeeze('columns')
srAmbProf=pd.read_excel('trabalhadores21.xlsx',sheet_name='AMBIENTE',header=0,usecols=(0,1),index_col=0).squeeze('columns')
print('==============================================')

print('Questão 1 - (3.0 pontos)')
# 
#======================================================================
# 1- Conhecendo as Series:
# Exiba:
# (0.3) a- srGenProf: a Series formada pelos 4 primeiros e pelos 4 
#          últimos elementos de srGenProf, após ordená-los crescentemente
#          por profissão
# (0.3) b- srIdProf: idade média dos trabalhadores por profissão
# (0.3) c- Ambiente das profissões sem repetição
# (0.3) d- srGenProf: tabela de frequência das profissões
# (0.3) e- srIdProf: profissão(ões) dos trabalhadores mais jovens
# (0.3) f- srGenProf: percentual de trabalhadores que são BOMBEIRO
# (0.3) g- srIdGen:  idade média, mediana, mínima e máxima por gênero 
# (0.3) h - srGenProf: gênero dos trabalhadores que são GARI, sem repetição
# (0.3) i - srIdProf: quantidade de valores ausentes
# (0.3) j - srIdProf: profissões dos trabalhadores com idade entre 20 e 30 anos 
#======================================================================
# 
print('1.a- srGenProf: a Series com 8 elementos ordenada crescentemente por profissão')
s=srGenProf.sort_index()
print(pd.concat([s.head(4),s.tail(4)]))

print('1.b- srIdProf: média de idade dos trabalhadores por profissao')
g1b=srIdProf.groupby(level=0)
print(g1b.mean())

print('1.c- Ambiente das profissões sem repetição')
print(srAmbProf.unique())

print('1.d- srGenProf: tabela de frequência das profissões')
print(srGenProf.index.value_counts())

print('1.e- srIdProf: profissão(ões) dos trabalhadores mais jovens')
menor=srIdProf.min()
print(list(srIdProf.loc[srIdProf==menor].index.unique()))

print('1.f- srGenProf: percentual de trabalhadores que são BOMBEIRO')
s1f=srGenProf.loc['BOMBEIRO']
print(s1f.size*100/srGenProf.size)

print('1.g- srIdGen:  idade média, mediana, mínima e máxima por gênero')
g1f=srIdGen.groupby(level=0)
print(g1f.agg(['mean','median','min','max']))

print('1.h- srGenProf: gênero dos trabalhadores que são GARI, sem repetição')
s1h=srGenProf.loc['GARI']
print(s1h)

print('1.i- srIdProf: quantidade de valores ausentes')
print(srIdProf.isnull().sum())

print('1.j- srIdProf: profissões dos trabalhadores com idade  entre 20 e 40 anos')
f1j=(srIdProf>=20) & (srIdProf<=40)
f1j=srIdProf.between(20,40)
print(srIdProf.loc[f1j])

print('-----------------------------------')
print('==============================================')

print('Questão 2 - (2.0 pontos)')
# 
#======================================================================
# 2-  Construindo e visualizando:
#    (1.2) a- srIdGen: construir uma Series a partir de srIdGen
#            com os anos que faltam, para se aposentar por idade,
#            considerando o seguinte critério: 
#                idade atual >= 40 anos, aposenta-se com 67 anos
#                idade atual < 40 anos, aposenta-se com 72 anos
#             Mostrar a nova Series ordenada por profissão
#   
#    (0.8) b- Mostrar em um gráfico barras horizontal, o tempo médio 
#             faltante para se aposentar por gênero 
#          Caso vc não tenha feito o item anterior, use srIdGen para
#          mostrar este gráfico.
#  
#======================================================================
# 
print('2.a- Series para se aposentar')
def aposentaem(val):
    if val >=40:
        return 67
    else:
        return 72
sNova=srIdGen.apply(aposentaem)
print(sNova.sort_index())

print('2.b- Grafico de barras horizontal com o tempo médio faltante por gênero')
g2b=sNova.groupby(level=0)
s2b=g2b.mean()
s2b.plot.bar()
plt.show()

print('-----------------------------------')
print('==============================================')

print('Questão 3 - (1.5 pontos)')
# 
#======================================================================
# 3- Responda as seguintes perguntas: 
#   (0.5) a- Quantidade total de trabalhadores do gênero M 
#            em cada AMBIENTE?
#   (0.5) b - Qual a tabela de frequência de gênero em cada um dos ambientes?
#   (0.5) c - Média de idade dos trabalhadores que trabalham em ambiente EXTERNO 
#             Lembre-se que o .loc pode ter uma lista de valores do index
#======================================================================
# 
print('3.a- Quantidade total de trabalhadores do gênero M em cada AMBIENTE')
f3a=srGenProf=='M'
s3a=srGenProf.loc[f3a]
g3a=s3a.groupby(srAmbProf)
print(g3a.count())

print('3.b- Tabela de frequência de gênero cada um dos ambientes')
g3b=srGenProf.groupby(srAmbProf)
print(g3b.value_counts())

print('3.c- Média de idade dos trabalhadores que trabalham em ambiente EXTERNO')
sAux3c=srAmbProf.loc[srAmbProf=='EXTERNO']
s3c=srIdProf.loc[list(sAux3c.index)]

s3c=srIdProf.loc[srAmbProf=='EXTERNO']
print(s3c.mean())
 
print('\n-----------------------------------\n')


 


print('-----------------------------------')
print('==============================================')

print('Questão 4 - (3.5 pontos)')
# 
#======================================================================
# 4- Criando categorias, tabelas de frequência e resumos agrupados
#    srIdProf,srGenProf, srAmbProf: 
#   (1.5) a- Categorize as idades em 3 faixas de mesma amplitude 
#           identificando-as como JOVEM,ADULTO,SENIOR
#           Visualize em um gráfico de pizza, a frequência das faixas
#   (1.0) b- Exiba a quantidade de indivíduos por 
#                  faixa de idade x gênero
#   (1.0) b- Mostre a idade mínima, máxima, mediana e média por 
#           Ambiente x Faixa de Idade:
#    

#======================================================================
# 
print('4.a - Gráfico de pizza da frequência das faixas')
sFx=pd.cut(srIdProf,bins=3,labels=['JOVEM','ADULTO','SENIOR'])
s4a=sFx.value_counts()
s4a.plot.pie(autopct='%.1f')
plt.show()

print('4.b - quantidade de indivíduos por  faixa de idade x gênero')
print(pd.crosstab(sFx.values,srGenProf.values))

print('4.c - Idades mínima, máxima, mediana e média por ambiente/faixa id')
#print(pd.crosstab(index=sFx.values,columns=srGenProf.values,values=srIdProf.values,aggfunc=['min', 'max', 'median','mean']))

g4c=srIdProf.groupby([srAmbProf,sFx])
print(g4c.agg(['min', 'max', 'median','mean']))
print('-----------------------------------')
